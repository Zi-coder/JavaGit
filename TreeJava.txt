class Node {
    int key;
    String name;

    Node leftChild;
    Node rightChild;

    Node(int key,String name){
        this.key =key;
        this.name = name;
    }
    public String toString(){
        return name + " has key " + key;
    }
}

public class NewMain /* BinaryTree*/{
    Node root;
    public void addNode(int key ,String name){
     Node newNode = new Node(key,name);
     if(root == null)
     {
         root = newNode;
     }else{
         Node focusNode = root;
         Node parent;
         while(true){
             parent = focusNode;
             if(key < focusNode.key) {
                 focusNode = focusNode.leftChild;
                 if (focusNode == null) {
                     parent.leftChild = newNode;
                     return;
                 }
             }else{
                 focusNode = focusNode.rightChild;
                 if(focusNode == null){
                     parent.rightChild = newNode;
                     return;
                 }
             }
         }
     }

    }
    public void inOrderTraverse(Node focusNode){
if(focusNode != null){
    inOrderTraverse(focusNode.leftChild);
    System.out.println(focusNode);
    inOrderTraverse(focusNode.rightChild);
}
    }
    public static void main(String[] args) {

        NewMain theTree = new NewMain();
        theTree.addNode(50,"Boss");
        theTree.addNode(15,"Peon");
        theTree.addNode(30,"Secretary");
        theTree.addNode(60,"SalesMan");
        theTree.addNode(80,"SalesManager");
        theTree.addNode(20,"Maintainance");

        theTree.inOrderTraverse(theTree.root);
    }
}
